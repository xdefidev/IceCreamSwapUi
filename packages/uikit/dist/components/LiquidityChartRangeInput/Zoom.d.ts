/// <reference types="react" />
/// <reference types="react" />
import { ScaleLinear, ZoomTransform } from "d3";
import { ZoomLevels } from "./types";
export declare const ZoomOverlay: import("styled-components").IStyledComponent<"web", {
    suppressHydrationWarning?: boolean | undefined;
    className?: string | undefined;
    color?: string | undefined;
    height?: string | number | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    max?: string | number | undefined;
    media?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    name?: string | undefined;
    style?: import("react").CSSProperties | undefined;
    target?: string | undefined;
    type?: string | undefined;
    width?: string | number | undefined;
    role?: import("react").AriaRole | undefined;
    tabIndex?: number | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    accentHeight?: string | number | undefined;
    accumulate?: "none" | "sum" | undefined;
    additive?: "replace" | "sum" | undefined;
    alignmentBaseline?: "inherit" | "auto" | "baseline" | "middle" | "after-edge" | "alphabetic" | "before-edge" | "central" | "hanging" | "ideographic" | "mathematical" | "text-after-edge" | "text-before-edge" | undefined;
    allowReorder?: "yes" | "no" | undefined;
    alphabetic?: string | number | undefined;
    amplitude?: string | number | undefined;
    arabicForm?: "initial" | "medial" | "terminal" | "isolated" | undefined;
    ascent?: string | number | undefined;
    attributeName?: string | undefined;
    attributeType?: string | undefined;
    autoReverse?: (boolean | "false" | "true") | undefined;
    azimuth?: string | number | undefined;
    baseFrequency?: string | number | undefined;
    baselineShift?: string | number | undefined;
    baseProfile?: string | number | undefined;
    bbox?: string | number | undefined;
    begin?: string | number | undefined;
    bias?: string | number | undefined;
    by?: string | number | undefined;
    calcMode?: string | number | undefined;
    capHeight?: string | number | undefined;
    clip?: string | number | undefined;
    clipPath?: string | undefined;
    clipPathUnits?: string | number | undefined;
    clipRule?: string | number | undefined;
    colorInterpolation?: string | number | undefined;
    colorInterpolationFilters?: "inherit" | "auto" | "linearRGB" | "sRGB" | undefined;
    colorProfile?: string | number | undefined;
    colorRendering?: string | number | undefined;
    contentScriptType?: string | number | undefined;
    contentStyleType?: string | number | undefined;
    cursor?: string | number | undefined;
    cx?: string | number | undefined;
    cy?: string | number | undefined;
    d?: string | undefined;
    decelerate?: string | number | undefined;
    descent?: string | number | undefined;
    diffuseConstant?: string | number | undefined;
    direction?: string | number | undefined;
    display?: string | number | undefined;
    divisor?: string | number | undefined;
    dominantBaseline?: string | number | undefined;
    dur?: string | number | undefined;
    dx?: string | number | undefined;
    dy?: string | number | undefined;
    edgeMode?: string | number | undefined;
    elevation?: string | number | undefined;
    enableBackground?: string | number | undefined;
    end?: string | number | undefined;
    exponent?: string | number | undefined;
    externalResourcesRequired?: (boolean | "false" | "true") | undefined;
    fill?: string | undefined;
    fillOpacity?: string | number | undefined;
    fillRule?: "inherit" | "evenodd" | "nonzero" | undefined;
    filter?: string | undefined;
    filterRes?: string | number | undefined;
    filterUnits?: string | number | undefined;
    floodColor?: string | number | undefined;
    floodOpacity?: string | number | undefined;
    focusable?: "auto" | (boolean | "false" | "true") | undefined;
    fontFamily?: string | undefined;
    fontSize?: string | number | undefined;
    fontSizeAdjust?: string | number | undefined;
    fontStretch?: string | number | undefined;
    fontStyle?: string | number | undefined;
    fontVariant?: string | number | undefined;
    fontWeight?: string | number | undefined;
    format?: string | number | undefined;
    fr?: string | number | undefined;
    from?: string | number | undefined;
    fx?: string | number | undefined;
    fy?: string | number | undefined;
    g1?: string | number | undefined;
    g2?: string | number | undefined;
    glyphName?: string | number | undefined;
    glyphOrientationHorizontal?: string | number | undefined;
    glyphOrientationVertical?: string | number | undefined;
    glyphRef?: string | number | undefined;
    gradientTransform?: string | undefined;
    gradientUnits?: string | undefined;
    hanging?: string | number | undefined;
    horizAdvX?: string | number | undefined;
    horizOriginX?: string | number | undefined;
    href?: string | undefined;
    ideographic?: string | number | undefined;
    imageRendering?: string | number | undefined;
    in2?: string | number | undefined;
    in?: string | undefined;
    intercept?: string | number | undefined;
    k1?: string | number | undefined;
    k2?: string | number | undefined;
    k3?: string | number | undefined;
    k4?: string | number | undefined;
    k?: string | number | undefined;
    kernelMatrix?: string | number | undefined;
    kernelUnitLength?: string | number | undefined;
    kerning?: string | number | undefined;
    keyPoints?: string | number | undefined;
    keySplines?: string | number | undefined;
    keyTimes?: string | number | undefined;
    lengthAdjust?: string | number | undefined;
    letterSpacing?: string | number | undefined;
    lightingColor?: string | number | undefined;
    limitingConeAngle?: string | number | undefined;
    local?: string | number | undefined;
    markerEnd?: string | undefined;
    markerHeight?: string | number | undefined;
    markerMid?: string | undefined;
    markerStart?: string | undefined;
    markerUnits?: string | number | undefined;
    markerWidth?: string | number | undefined;
    mask?: string | undefined;
    maskContentUnits?: string | number | undefined;
    maskUnits?: string | number | undefined;
    mathematical?: string | number | undefined;
    mode?: string | number | undefined;
    numOctaves?: string | number | undefined;
    offset?: string | number | undefined;
    opacity?: string | number | undefined;
    operator?: string | number | undefined;
    order?: string | number | undefined;
    orient?: string | number | undefined;
    orientation?: string | number | undefined;
    origin?: string | number | undefined;
    overflow?: string | number | undefined;
    overlinePosition?: string | number | undefined;
    overlineThickness?: string | number | undefined;
    paintOrder?: string | number | undefined;
    panose1?: string | number | undefined;
    path?: string | undefined;
    pathLength?: string | number | undefined;
    patternContentUnits?: string | undefined;
    patternTransform?: string | number | undefined;
    patternUnits?: string | undefined;
    pointerEvents?: string | number | undefined;
    points?: string | undefined;
    pointsAtX?: string | number | undefined;
    pointsAtY?: string | number | undefined;
    pointsAtZ?: string | number | undefined;
    preserveAlpha?: (boolean | "false" | "true") | undefined;
    preserveAspectRatio?: string | undefined;
    primitiveUnits?: string | number | undefined;
    r?: string | number | undefined;
    radius?: string | number | undefined;
    refX?: string | number | undefined;
    refY?: string | number | undefined;
    renderingIntent?: string | number | undefined;
    repeatCount?: string | number | undefined;
    repeatDur?: string | number | undefined;
    requiredExtensions?: string | number | undefined;
    requiredFeatures?: string | number | undefined;
    restart?: string | number | undefined;
    result?: string | undefined;
    rotate?: string | number | undefined;
    rx?: string | number | undefined;
    ry?: string | number | undefined;
    scale?: string | number | undefined;
    seed?: string | number | undefined;
    shapeRendering?: string | number | undefined;
    slope?: string | number | undefined;
    spacing?: string | number | undefined;
    specularConstant?: string | number | undefined;
    specularExponent?: string | number | undefined;
    speed?: string | number | undefined;
    spreadMethod?: string | undefined;
    startOffset?: string | number | undefined;
    stdDeviation?: string | number | undefined;
    stemh?: string | number | undefined;
    stemv?: string | number | undefined;
    stitchTiles?: string | number | undefined;
    stopColor?: string | undefined;
    stopOpacity?: string | number | undefined;
    strikethroughPosition?: string | number | undefined;
    strikethroughThickness?: string | number | undefined;
    string?: string | number | undefined;
    stroke?: string | undefined;
    strokeDasharray?: string | number | undefined;
    strokeDashoffset?: string | number | undefined;
    strokeLinecap?: "inherit" | "round" | "butt" | "square" | undefined;
    strokeLinejoin?: "inherit" | "round" | "bevel" | "miter" | undefined;
    strokeMiterlimit?: string | number | undefined;
    strokeOpacity?: string | number | undefined;
    strokeWidth?: string | number | undefined;
    surfaceScale?: string | number | undefined;
    systemLanguage?: string | number | undefined;
    tableValues?: string | number | undefined;
    targetX?: string | number | undefined;
    targetY?: string | number | undefined;
    textAnchor?: string | undefined;
    textDecoration?: string | number | undefined;
    textLength?: string | number | undefined;
    textRendering?: string | number | undefined;
    to?: string | number | undefined;
    transform?: string | undefined;
    u1?: string | number | undefined;
    u2?: string | number | undefined;
    underlinePosition?: string | number | undefined;
    underlineThickness?: string | number | undefined;
    unicode?: string | number | undefined;
    unicodeBidi?: string | number | undefined;
    unicodeRange?: string | number | undefined;
    unitsPerEm?: string | number | undefined;
    vAlphabetic?: string | number | undefined;
    values?: string | undefined;
    vectorEffect?: string | number | undefined;
    version?: string | undefined;
    vertAdvY?: string | number | undefined;
    vertOriginX?: string | number | undefined;
    vertOriginY?: string | number | undefined;
    vHanging?: string | number | undefined;
    vIdeographic?: string | number | undefined;
    viewBox?: string | undefined;
    viewTarget?: string | number | undefined;
    visibility?: string | number | undefined;
    vMathematical?: string | number | undefined;
    widths?: string | number | undefined;
    wordSpacing?: string | number | undefined;
    writingMode?: string | number | undefined;
    x1?: string | number | undefined;
    x2?: string | number | undefined;
    x?: string | number | undefined;
    xChannelSelector?: string | undefined;
    xHeight?: string | number | undefined;
    xlinkActuate?: string | undefined;
    xlinkArcrole?: string | undefined;
    xlinkHref?: string | undefined;
    xlinkRole?: string | undefined;
    xlinkShow?: string | undefined;
    xlinkTitle?: string | undefined;
    xlinkType?: string | undefined;
    xmlBase?: string | undefined;
    xmlLang?: string | undefined;
    xmlns?: string | undefined;
    xmlnsXlink?: string | undefined;
    xmlSpace?: string | undefined;
    y1?: string | number | undefined;
    y2?: string | number | undefined;
    y?: string | number | undefined;
    yChannelSelector?: string | undefined;
    z?: string | number | undefined;
    zoomAndPan?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "false" | "true") | undefined;
    'aria-autocomplete'?: "none" | "both" | "inline" | "list" | undefined;
    'aria-braillelabel'?: string | undefined;
    'aria-brailleroledescription'?: string | undefined;
    'aria-busy'?: (boolean | "false" | "true") | undefined;
    'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colindextext'?: string | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-description'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-disabled'?: (boolean | "false" | "true") | undefined;
    'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "false" | "true") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "false" | "true") | undefined;
    'aria-haspopup'?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
    'aria-hidden'?: (boolean | "false" | "true") | undefined;
    'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "false" | "true") | undefined;
    'aria-multiline'?: (boolean | "false" | "true") | undefined;
    'aria-multiselectable'?: (boolean | "false" | "true") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
    'aria-readonly'?: (boolean | "false" | "true") | undefined;
    'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "false" | "true") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowindextext'?: string | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "false" | "true") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: import("react").ClipboardEventHandler<SVGRectElement> | undefined;
    onCopyCapture?: import("react").ClipboardEventHandler<SVGRectElement> | undefined;
    onCut?: import("react").ClipboardEventHandler<SVGRectElement> | undefined;
    onCutCapture?: import("react").ClipboardEventHandler<SVGRectElement> | undefined;
    onPaste?: import("react").ClipboardEventHandler<SVGRectElement> | undefined;
    onPasteCapture?: import("react").ClipboardEventHandler<SVGRectElement> | undefined;
    onCompositionEnd?: import("react").CompositionEventHandler<SVGRectElement> | undefined;
    onCompositionEndCapture?: import("react").CompositionEventHandler<SVGRectElement> | undefined;
    onCompositionStart?: import("react").CompositionEventHandler<SVGRectElement> | undefined;
    onCompositionStartCapture?: import("react").CompositionEventHandler<SVGRectElement> | undefined;
    onCompositionUpdate?: import("react").CompositionEventHandler<SVGRectElement> | undefined;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<SVGRectElement> | undefined;
    onFocus?: import("react").FocusEventHandler<SVGRectElement> | undefined;
    onFocusCapture?: import("react").FocusEventHandler<SVGRectElement> | undefined;
    onBlur?: import("react").FocusEventHandler<SVGRectElement> | undefined;
    onBlurCapture?: import("react").FocusEventHandler<SVGRectElement> | undefined;
    onChange?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onChangeCapture?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onBeforeInput?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onBeforeInputCapture?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onInput?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onInputCapture?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onReset?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onResetCapture?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onSubmit?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onSubmitCapture?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onInvalid?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onInvalidCapture?: import("react").FormEventHandler<SVGRectElement> | undefined;
    onLoad?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onLoadCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onError?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onErrorCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onKeyDown?: import("react").KeyboardEventHandler<SVGRectElement> | undefined;
    onKeyDownCapture?: import("react").KeyboardEventHandler<SVGRectElement> | undefined;
    onKeyPress?: import("react").KeyboardEventHandler<SVGRectElement> | undefined;
    onKeyPressCapture?: import("react").KeyboardEventHandler<SVGRectElement> | undefined;
    onKeyUp?: import("react").KeyboardEventHandler<SVGRectElement> | undefined;
    onKeyUpCapture?: import("react").KeyboardEventHandler<SVGRectElement> | undefined;
    onAbort?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onAbortCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onCanPlay?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onCanPlayCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onCanPlayThrough?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onDurationChange?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onDurationChangeCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onEmptied?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onEmptiedCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onEncrypted?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onEncryptedCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onEnded?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onEndedCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onLoadedData?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onLoadedDataCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onLoadedMetadata?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onLoadStart?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onLoadStartCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onPause?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onPauseCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onPlay?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onPlayCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onPlaying?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onPlayingCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onProgress?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onProgressCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onRateChange?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onRateChangeCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onResize?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onResizeCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onSeeked?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onSeekedCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onSeeking?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onSeekingCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onStalled?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onStalledCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onSuspend?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onSuspendCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onTimeUpdate?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onTimeUpdateCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onVolumeChange?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onVolumeChangeCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onWaiting?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onWaitingCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onAuxClick?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onAuxClickCapture?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onClick?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onClickCapture?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onContextMenu?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onContextMenuCapture?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onDoubleClick?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onDoubleClickCapture?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onDrag?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragCapture?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragEnd?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragEndCapture?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragEnter?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragEnterCapture?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragExit?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragExitCapture?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragLeave?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragLeaveCapture?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragOver?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragOverCapture?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragStart?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDragStartCapture?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDrop?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onDropCapture?: import("react").DragEventHandler<SVGRectElement> | undefined;
    onMouseDown?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseDownCapture?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseMove?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseMoveCapture?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseOut?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseOutCapture?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseOver?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseOverCapture?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseUp?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onMouseUpCapture?: import("react").MouseEventHandler<SVGRectElement> | undefined;
    onSelect?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onSelectCapture?: import("react").ReactEventHandler<SVGRectElement> | undefined;
    onTouchCancel?: import("react").TouchEventHandler<SVGRectElement> | undefined;
    onTouchCancelCapture?: import("react").TouchEventHandler<SVGRectElement> | undefined;
    onTouchEnd?: import("react").TouchEventHandler<SVGRectElement> | undefined;
    onTouchEndCapture?: import("react").TouchEventHandler<SVGRectElement> | undefined;
    onTouchMove?: import("react").TouchEventHandler<SVGRectElement> | undefined;
    onTouchMoveCapture?: import("react").TouchEventHandler<SVGRectElement> | undefined;
    onTouchStart?: import("react").TouchEventHandler<SVGRectElement> | undefined;
    onTouchStartCapture?: import("react").TouchEventHandler<SVGRectElement> | undefined;
    onPointerDown?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerDownCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerMove?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerMoveCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerUp?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerUpCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerCancel?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerCancelCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerEnter?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerEnterCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerLeave?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerLeaveCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerOver?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerOverCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerOut?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onPointerOutCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onGotPointerCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onLostPointerCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<SVGRectElement> | undefined;
    onScroll?: import("react").UIEventHandler<SVGRectElement> | undefined;
    onScrollCapture?: import("react").UIEventHandler<SVGRectElement> | undefined;
    onWheel?: import("react").WheelEventHandler<SVGRectElement> | undefined;
    onWheelCapture?: import("react").WheelEventHandler<SVGRectElement> | undefined;
    onAnimationStart?: import("react").AnimationEventHandler<SVGRectElement> | undefined;
    onAnimationStartCapture?: import("react").AnimationEventHandler<SVGRectElement> | undefined;
    onAnimationEnd?: import("react").AnimationEventHandler<SVGRectElement> | undefined;
    onAnimationEndCapture?: import("react").AnimationEventHandler<SVGRectElement> | undefined;
    onAnimationIteration?: import("react").AnimationEventHandler<SVGRectElement> | undefined;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<SVGRectElement> | undefined;
    onTransitionEnd?: import("react").TransitionEventHandler<SVGRectElement> | undefined;
    onTransitionEndCapture?: import("react").TransitionEventHandler<SVGRectElement> | undefined;
    ref?: import("react").LegacyRef<SVGRectElement> | undefined;
    key?: import("react").Key | null | undefined;
}>;
export default function Zoom({ svg, xScale, setZoom, width, height, resetBrush, showResetButton, zoomLevels, }: {
    svg: SVGElement | null;
    xScale: ScaleLinear<number, number>;
    setZoom: (transform: ZoomTransform) => void;
    width: number;
    height: number;
    resetBrush: () => void;
    showResetButton: boolean;
    zoomLevels: ZoomLevels;
}): import("react/jsx-runtime").JSX.Element;
